const fs = require("fs");
const path = require("path");
const { Worker, setEnvironmentData } = require("node:worker_threads");

const dryRun = true;
const debugMode = false;
const monthsAmount = 6;
const execPath = "../";

const bytesToUnits = (bytes) => {
  const units = ["B", "KB", "MB", "GB"];
  let current = bytes;
  for (let i = 0; i < units.length; i++) {
    current = bytes / Math.pow(1024, i);
    if (current < 1024) {
      return current.toFixed(2) + " " + units[i];
    }
  }
  return current.toFixed(2) + " GB";
};

(async () => {
  const initialPath = path.join(fs.realpathSync(__dirname), execPath);

  const monthsMs = 1000 * 60 * 60 * 24 * 28 * monthsAmount;

  const nowDate = new Date();
  const monthsDate = new Date(monthsMs);

  const sizesPromises = [];

  function deleteNodeModules(p, diffDate = new Date()) {
    const dirItems = fs.readdirSync(p);
    for (const item of dirItems) {
      const itemPath = path.join(p, item);
      const stats = fs.statSync(itemPath);
      if (!stats.isDirectory()) {
        continue;
      }
      if (item === "node_modules") {
        if (diffDate < monthsDate) continue;
        sizesPromises.push(
          new Promise((resolve) => {
            setTimeout(() => {
              setEnvironmentData("path", {
                path: itemPath,
                diffDate,
                debugMode,
              });
              const worker = new Worker("./dir-stats.worker.js");
              worker.on("message", (size) => {
                if (debugMode)
                  console.log("worker:message:" + itemPath.split("\\").at(-2));
                resolve({
                  ...size,
                  sizes: size.sizes.map((x) => parseInt(x, 10)),
                });
              });
            }, 0);
          })
        );

        if (!dryRun) fs.rmSync(itemPath, { recursive: true, force: true });

        continue;
      }

      const diff = nowDate - stats.mtime;
      deleteNodeModules(itemPath, new Date(diff));
    }
  }

  if (dryRun) console.log("running in dry-run mode");
  console.log(
    `about to delete every node_modules folder more than ${monthsAmount} months old`
  );
  deleteNodeModules(initialPath);

  const sizes = await Promise.all(sizesPromises);
  const deleteSize = bytesToUnits(
    sizes.reduce(
      (acc, sizeArr) =>
        acc + sizeArr.sizes.reduce((acc2, size) => acc2 + size, 0),
      0
    )
  );

  for (const s of sizes) {
    const y = s.diffDate.getFullYear() - 1970;
    console.log(
      `deleting (not modified for ${
        y > 0 ? y + " years, " : ""
      }${s.diffDate.getMonth()} months, ${s.diffDate.getDate()} days):`,
      s.path.replace(initialPath, "")
    );
    if (!dryRun) fs.rmSync(s.path, { recursive: true, force: true });
  }

  console.log(
    `deleted ${sizes.length} node_modules folders, total size: ${deleteSize}`
  );

  if (dryRun) console.log("dry-run complete. No changes were made");
})();
